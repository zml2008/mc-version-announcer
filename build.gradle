plugins {
    alias libs.plugins.indra
    id 'application'
    alias libs.plugins.eclipseApt
    alias libs.plugins.jib
}

group = "ca.stellardrift"
version = "0.1"

dependencies {
    implementation(libs.vanillagradle) {
        exclude group: 'org.cadixdev'
        exclude group: 'org.apache.httpcomponents.client5'
        exclude group: 'org.ow2.asm'
        exclude module: 'gradle-idea-ext'
    }
    implementation libs.gson
    implementation libs.tinylog.api
    runtimeOnly libs.tinylog.impl
    compileOnlyApi libs.immutables.annotations
    compileOnlyApi libs.immutables.gson
    annotationProcessor libs.immutables.processor
}

def javaTarget = 21
indra {
    github('zml2008', 'mc-version-announcer')
    javaVersions {
        target(javaTarget)
    }
}

application {
    mainClass = 'ca.stellardrift.mcannouncer.VersionAnnouncer'
}

jib {
    from {
        image = "azul/zulu-openjdk-alpine:${javaTarget}-jre"
        platforms {
            // We can only build multi-arch images when pushing to a registry, not when building locally
            def requestedTasks = gradle.startParameter.taskNames
            if ('jibBuildTar' in requestedTasks || 'jibDockerBuild' in requestedTasks) {
                platform {
                    // todo: better logic
                    architecture = System.getProperty('os.arch') == 'aarch64' ? 'arm64' : 'amd64'
                    os = 'linux'
                }
            } else {
                platform {
                    architecture = 'amd64'
                    os = 'linux'
                }
                platform {
                    architecture = 'arm64'
                    os = 'linux'
                }
            }
        }
    }
    to.image = "ghcr.io/zml2008/version-announcer"
    container {
        mainClass = application.mainClass.get()
        args = ["/data/config.json"]
        workingDirectory = '/data'
    }
}

def outputImageId = tasks.register("printJibMeta") {
    description = "Expose image information as an output for GitHub Actions"

    def jibImageJson = project.jib.outputPaths.imageJson
    def githubOutput = providers.environmentVariable("GITHUB_OUTPUT")
    inputs.property("jibImageJson", jibImageJson)
    inputs.property("githubOutput", githubOutput).optional(true)

    doLast {
        if (!githubOutput.present) {
            didWork = false
            return
        }

        file(githubOutput.get()).withWriterAppend('utf-8', {
            it.write("imageJson=")
            file(jibImageJson).withReader 'utf-8', { meta -> meta.transferTo(it) }
        })
    }
}

['jib', 'jibDockerBuild', 'jibBuildTar'].each {
    tasks.named(it).configure { finalizedBy(outputImageId.name) }
}

