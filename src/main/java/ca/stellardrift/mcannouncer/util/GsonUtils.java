package ca.stellardrift.mcannouncer.util;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.TypeAdapterFactory;
import org.spongepowered.gradle.vanilla.internal.model.Argument;
import org.spongepowered.gradle.vanilla.internal.model.GroupArtifactVersion;
import org.spongepowered.gradle.vanilla.internal.model.rule.FeatureRule;
import org.spongepowered.gradle.vanilla.internal.model.rule.OperatingSystemRule;
import org.spongepowered.gradle.vanilla.internal.model.rule.RuleDeclarationTypeAdapter;
import org.spongepowered.gradle.vanilla.internal.util.GsonSerializers;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.time.ZonedDateTime;
import java.util.Objects;
import java.util.ServiceLoader;

public class GsonUtils {
    public static final Gson GSON;

    static {
        final GsonBuilder builder = new GsonBuilder()
            .registerTypeAdapter(ZonedDateTime.class, GsonSerializers.ZDT)
            .registerTypeAdapter(GroupArtifactVersion.class, GsonSerializers.GAV)
            .registerTypeAdapterFactory(new RuleDeclarationTypeAdapter.Factory(FeatureRule.INSTANCE, OperatingSystemRule.INSTANCE))
            .registerTypeAdapterFactory(new Argument.ArgumentTypeAdapter.Factory());

        // Discover type adapters generated by Immutables AP
        for (final TypeAdapterFactory factory : ServiceLoader.load(TypeAdapterFactory.class, org.spongepowered.gradle.vanilla.internal.util.GsonUtils.class.getClassLoader())) {
            builder.registerTypeAdapterFactory(factory);
        }

        GSON = builder.create();
    }

    public static <T> T parseFromJson(final URL url, final Class<T> type) throws IOException {
        try (final var reader = new BufferedReader(new InputStreamReader(Objects.requireNonNull(url, "url").openStream(), StandardCharsets.UTF_8))) {
            return GsonUtils.GSON.fromJson(reader, type);
        }
    }

    public static <T> T parseFromJson(final Path path, final Class<T> type) throws IOException {
        try (final var reader = Files.newBufferedReader(path, StandardCharsets.UTF_8)) {
            return GsonUtils.GSON.fromJson(reader, type);
        }
    }

    public static <T> T parseFromJson(final File file, final Class<T> type) throws IOException {
        try (final var reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), StandardCharsets.UTF_8))) {
            return GsonUtils.GSON.fromJson(reader, type);
        }
    }

    public static <T> void writeToJson(final Path path, final T value, final Class<T> type) throws IOException {
        try (final var writer = Files.newBufferedWriter(path, StandardCharsets.UTF_8)) {
            GsonUtils.GSON.toJson(value, type, writer);
        }
    }

    private GsonUtils() {
    }

}
